@using Constants
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Implicit Grant - Client Page</title>
    </head>
    <body style="background-color: azure">
        <h1>Implicit Grant</h1>
        <h2>Client Page</h2>
        <form id="form1">
            <div>
                Access Token<br />
                <input id="AccessToken" name="AccessToken" />
                <input id="Authorize" type="button" name="signin.AccessToken" value="Authorize" />
                <br />
                <input id="CallApi" name="submit.CallApi" value="Access Protected Resource API" type="button" />
            </div>
            <div id="output">
            </div>
        </form>

        <script src="http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.js"></script>
        <script type="text/javascript">
            (function($) {
                var authorizeUri = '@(Paths.AuthorizationServerBaseAddress + Paths.AuthorizePath)';
                var apiUri = '@(Paths.ResourceServerBaseAddress + Paths.MePath)';
                var returnUri = '@Paths.ImplicitGrantCallBackPath';

                $('#Authorize').click(function() {
                    var nonce = 'my-nonce';
                    /*Building authorization request
                    The client constructs the request URI by adding the following
                    parameters to the query component of the authorization endpoint URI
                    using the "application/x-www-form-urlencoded" format
                    response_type
                    =============
                    REQUIRED.  Value MUST be set to "token".
                    client_id
                    =========
                    REQUIRED.  The client identifier.
                    redirect_uri
                    ============
                    OPTIONAL.
                    scope
                    =====
                    OPTIONAL.  The scope of the access request
                    The authorization server MAY fully or partially ignore the scope
                    requested by the client, based on the authorization server policy or
                    the resource owner's instructions.
                    state
                    =====
                    RECOMMENDED.  An opaque value used by the client to maintain
                    state between the request and callback.  The authorization
                    server includes this value when redirecting the user-agent back
                    to the client.  The parameter SHOULD be used for preventing
                    cross-site request forgery
                    */


                    var uri = addQueryString(authorizeUri, {
                        'response_type': 'token',
                        'client_id': '2',
                        'redirect_uri': returnUri,
                        'state': nonce,
                        'scope': 'SHOW_NOTES SHOW_SOME_INFO'
                    });

                    window.oauth = {};
                    window.oauth.signin = function(data) {
                        if (data.state !== nonce) {
                            return;
                        }

                        $('#AccessToken').val(data.access_token);
                    };
                    window.open(uri, 'Authorize', 'width=640,height=480');
                });

                $('#CallApi').click(function() {
                    $.ajax(apiUri, {
                        beforeSend: function(xhr) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + $('#AccessToken').val());
                        },
                        dataType: 'text',
                        cache: false,
                        success: function(data) {
                            console.log(data);
                            $('#output').text(data);
                        }
                    });
                });

                function addQueryString(uri, parameters) {
                    var delimiter = (uri.indexOf('?') == -1) ? '?' : '&';
                    for (var parameterName in parameters) {
                        var parameterValue = parameters[parameterName];
                        uri += delimiter + encodeURIComponent(parameterName) + '=' + encodeURIComponent(parameterValue);
                        delimiter = '&';
                    }
                    return uri;
                }
            })(jQuery);
        </script>
    </body>
</html>